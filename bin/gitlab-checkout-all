#!/bin/python3
import getopt
import os
import re
import subprocess
import sys
import json

import requests

gitlabUrl = os.environ['GITLAB_URL']
gitlabToken = os.environ['GITLAB_TOKEN']

simulate = False
verbose = False
destdir = os.path.join(".")
exclusionFile = ".gitlabignore"
excludes = []
mirror = False
reference = ""
dissociate = False
debug = False

opts, args = getopt.getopt(sys.argv[1:], "hd:se:r:vm", ["help", "simulate", "mirror", "reference=", "dissociate", "dest=", "exclude=", "exclude-file=", 'verbose', 'debug'])
for opt, arg in opts:
    if opt in ('-h', '--help'):
        print('''gitlab-checkout [-h|--help] [-s|--simulate] [-d <path>|--dest=<path>] [-e <regex>|--exclude=<regex>]
        
  options:
    -h --help                 print help
    -s --simulate             simulate only, don't perform any checkout
    -d --dest         <path>  directory to checkout into (defaults to working dir)
    -e --exclude      <regex> exclude projects matching provided regex
       --exclude-file <file>  read exclusion patterns from file (default: .gitlabignore)
                              the exclusion file is searched in current workdir and user home directory
    -m --mirror               perform mirror operration
    -r --reference    <dir>   directory containing git repositories used for reference
       --dissociate           use reference repos only to reduce network bandwith
    -v --verbose              print messages about whats going on
       --debug                print debug information
  
  example:

    gitlab-checkout -e group1 --exclude=group2 -d dest
  
  perform checkout of all projects accessible using the token that do not match the regex group1 or group2  into directory dest
''')
        sys.exit(-1)
    elif opt in ('-d', '--dest'):
        destdir = os.path.join(arg)
    elif opt in ('-s', '--simulate'):
        simulate = True
    elif opt in ('-e', '--exclude'):
        excludes.append(arg)
    elif opt == '--exclude-file':
        exclusionFile = os.path.join(arg)
    elif opt in ('-m', '--mirror'):
        mirror = True
    elif opt in ('-r', '--reference'):
        reference = arg
    elif opt in ('--dissociate'):
        dissociate = True
    elif opt in ('-v', '--verbose'):
        verbose = True
    elif opt in ('--debug'):
        debug = True

if not os.path.exists(exclusionFile):
    userignoreFile = os.path.join(os.path.expanduser("~"), exclusionFile)
    if verbose:
        print(exclusionFile + " does not exist, fallback to " + userignoreFile)
    exclusionFile = userignoreFile

if os.path.exists(exclusionFile):
    if verbose:
        print("reading exclusion patterns from " + exclusionFile)
    for line in open(exclusionFile, 'r').readlines():
        line = line.strip()
        if verbose:
            print("exclude projects matching " + line)
        excludes.append(line)

session = requests.Session()
response = session.get(gitlabUrl + "/api/v4/projects",
                       params={'simple': 'true', 'per_page': 1000},
                       headers={'PRIVATE-TOKEN': gitlabToken})
projectList = response.json()
if debug:
    print(json.dumps(projectList, indent=2))

def isExcluded(exclusions, path):
    for exclusion in exclusions:
        if re.search(exclusion, path):
            return True
    return False

for project in projectList:
    path = os.path.join(destdir, project['path_with_namespace'])
    url = project['ssh_url_to_repo']

    if isExcluded(excludes, url):
        if verbose:
            print(path + " is excluded")
        continue

    if os.path.exists(path):
        if verbose:
            print(path + " already checked out, fetching changes")
        git_cmd = "git -C " + path + " fetch --all"
        if simulate:
            print(git_cmd)
        else:
            subprocess.run(git_cmd, shell=True)
        continue

    parentDir = os.path.dirname(path)
    if not os.path.exists(parentDir) and not simulate:
        os.makedirs(parentDir)

    git_cmd = "git clone " + url
    if mirror:
        git_cmd += " --mirror"
        path += ".git"
    if reference != "":
        git_cmd += (" --reference " + reference + "/" + project['path_with_namespace'] + ".git")
        if dissociate:
            git_cmd += " --dissociate"
    git_cmd += " " + path

    if simulate:
        print(git_cmd)
    else:
        subprocess.run(git_cmd, shell=True)
